// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"goal", "assist", "save", "card"}},
		{Name: "match_events", Type: field.TypeInt},
		{Name: "player_events", Type: field.TypeInt},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_matches_events",
				Columns:    []*schema.Column{EventsColumns[2]},
				RefColumns: []*schema.Column{MatchesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "events_players_events",
				Columns:    []*schema.Column{EventsColumns[3]},
				RefColumns: []*schema.Column{PlayersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// MatchesColumns holds the columns for the "matches" table.
	MatchesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "date", Type: field.TypeTime},
		{Name: "result", Type: field.TypeString},
	}
	// MatchesTable holds the schema information for the "matches" table.
	MatchesTable = &schema.Table{
		Name:       "matches",
		Columns:    MatchesColumns,
		PrimaryKey: []*schema.Column{MatchesColumns[0]},
	}
	// PlayersColumns holds the columns for the "players" table.
	PlayersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "global", Type: field.TypeInt},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// PlayersTable holds the schema information for the "players" table.
	PlayersTable = &schema.Table{
		Name:       "players",
		Columns:    PlayersColumns,
		PrimaryKey: []*schema.Column{PlayersColumns[0]},
	}
	// PlayerMatchesColumns holds the columns for the "player_matches" table.
	PlayerMatchesColumns = []*schema.Column{
		{Name: "player_id", Type: field.TypeInt},
		{Name: "match_id", Type: field.TypeInt},
	}
	// PlayerMatchesTable holds the schema information for the "player_matches" table.
	PlayerMatchesTable = &schema.Table{
		Name:       "player_matches",
		Columns:    PlayerMatchesColumns,
		PrimaryKey: []*schema.Column{PlayerMatchesColumns[0], PlayerMatchesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "player_matches_player_id",
				Columns:    []*schema.Column{PlayerMatchesColumns[0]},
				RefColumns: []*schema.Column{PlayersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "player_matches_match_id",
				Columns:    []*schema.Column{PlayerMatchesColumns[1]},
				RefColumns: []*schema.Column{MatchesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		EventsTable,
		MatchesTable,
		PlayersTable,
		PlayerMatchesTable,
	}
)

func init() {
	EventsTable.ForeignKeys[0].RefTable = MatchesTable
	EventsTable.ForeignKeys[1].RefTable = PlayersTable
	PlayerMatchesTable.ForeignKeys[0].RefTable = PlayersTable
	PlayerMatchesTable.ForeignKeys[1].RefTable = MatchesTable
}
