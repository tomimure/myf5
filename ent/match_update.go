// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myf5/ent/event"
	"myf5/ent/match"
	"myf5/ent/player"
	"myf5/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MatchUpdate is the builder for updating Match entities.
type MatchUpdate struct {
	config
	hooks    []Hook
	mutation *MatchMutation
}

// Where appends a list predicates to the MatchUpdate builder.
func (mu *MatchUpdate) Where(ps ...predicate.Match) *MatchUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetDate sets the "date" field.
func (mu *MatchUpdate) SetDate(t time.Time) *MatchUpdate {
	mu.mutation.SetDate(t)
	return mu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableDate(t *time.Time) *MatchUpdate {
	if t != nil {
		mu.SetDate(*t)
	}
	return mu
}

// SetResult sets the "result" field.
func (mu *MatchUpdate) SetResult(s string) *MatchUpdate {
	mu.mutation.SetResult(s)
	return mu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (mu *MatchUpdate) SetNillableResult(s *string) *MatchUpdate {
	if s != nil {
		mu.SetResult(*s)
	}
	return mu
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (mu *MatchUpdate) AddEventIDs(ids ...int) *MatchUpdate {
	mu.mutation.AddEventIDs(ids...)
	return mu
}

// AddEvents adds the "events" edges to the Event entity.
func (mu *MatchUpdate) AddEvents(e ...*Event) *MatchUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mu.AddEventIDs(ids...)
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (mu *MatchUpdate) AddPlayerIDs(ids ...int) *MatchUpdate {
	mu.mutation.AddPlayerIDs(ids...)
	return mu
}

// AddPlayers adds the "players" edges to the Player entity.
func (mu *MatchUpdate) AddPlayers(p ...*Player) *MatchUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddPlayerIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (mu *MatchUpdate) Mutation() *MatchMutation {
	return mu.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (mu *MatchUpdate) ClearEvents() *MatchUpdate {
	mu.mutation.ClearEvents()
	return mu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (mu *MatchUpdate) RemoveEventIDs(ids ...int) *MatchUpdate {
	mu.mutation.RemoveEventIDs(ids...)
	return mu
}

// RemoveEvents removes "events" edges to Event entities.
func (mu *MatchUpdate) RemoveEvents(e ...*Event) *MatchUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mu.RemoveEventIDs(ids...)
}

// ClearPlayers clears all "players" edges to the Player entity.
func (mu *MatchUpdate) ClearPlayers() *MatchUpdate {
	mu.mutation.ClearPlayers()
	return mu
}

// RemovePlayerIDs removes the "players" edge to Player entities by IDs.
func (mu *MatchUpdate) RemovePlayerIDs(ids ...int) *MatchUpdate {
	mu.mutation.RemovePlayerIDs(ids...)
	return mu
}

// RemovePlayers removes "players" edges to Player entities.
func (mu *MatchUpdate) RemovePlayers(p ...*Player) *MatchUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemovePlayerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MatchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MatchUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MatchUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MatchUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Date(); ok {
		_spec.SetField(match.FieldDate, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Result(); ok {
		_spec.SetField(match.FieldResult, field.TypeString, value)
	}
	if mu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.EventsTable,
			Columns: []string{match.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !mu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.EventsTable,
			Columns: []string{match.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.EventsTable,
			Columns: []string{match.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.PlayersTable,
			Columns: match.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !mu.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.PlayersTable,
			Columns: match.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.PlayersTable,
			Columns: match.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MatchUpdateOne is the builder for updating a single Match entity.
type MatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchMutation
}

// SetDate sets the "date" field.
func (muo *MatchUpdateOne) SetDate(t time.Time) *MatchUpdateOne {
	muo.mutation.SetDate(t)
	return muo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableDate(t *time.Time) *MatchUpdateOne {
	if t != nil {
		muo.SetDate(*t)
	}
	return muo
}

// SetResult sets the "result" field.
func (muo *MatchUpdateOne) SetResult(s string) *MatchUpdateOne {
	muo.mutation.SetResult(s)
	return muo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableResult(s *string) *MatchUpdateOne {
	if s != nil {
		muo.SetResult(*s)
	}
	return muo
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (muo *MatchUpdateOne) AddEventIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.AddEventIDs(ids...)
	return muo
}

// AddEvents adds the "events" edges to the Event entity.
func (muo *MatchUpdateOne) AddEvents(e ...*Event) *MatchUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return muo.AddEventIDs(ids...)
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (muo *MatchUpdateOne) AddPlayerIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.AddPlayerIDs(ids...)
	return muo
}

// AddPlayers adds the "players" edges to the Player entity.
func (muo *MatchUpdateOne) AddPlayers(p ...*Player) *MatchUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddPlayerIDs(ids...)
}

// Mutation returns the MatchMutation object of the builder.
func (muo *MatchUpdateOne) Mutation() *MatchMutation {
	return muo.mutation
}

// ClearEvents clears all "events" edges to the Event entity.
func (muo *MatchUpdateOne) ClearEvents() *MatchUpdateOne {
	muo.mutation.ClearEvents()
	return muo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (muo *MatchUpdateOne) RemoveEventIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.RemoveEventIDs(ids...)
	return muo
}

// RemoveEvents removes "events" edges to Event entities.
func (muo *MatchUpdateOne) RemoveEvents(e ...*Event) *MatchUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return muo.RemoveEventIDs(ids...)
}

// ClearPlayers clears all "players" edges to the Player entity.
func (muo *MatchUpdateOne) ClearPlayers() *MatchUpdateOne {
	muo.mutation.ClearPlayers()
	return muo
}

// RemovePlayerIDs removes the "players" edge to Player entities by IDs.
func (muo *MatchUpdateOne) RemovePlayerIDs(ids ...int) *MatchUpdateOne {
	muo.mutation.RemovePlayerIDs(ids...)
	return muo
}

// RemovePlayers removes "players" edges to Player entities.
func (muo *MatchUpdateOne) RemovePlayers(p ...*Player) *MatchUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemovePlayerIDs(ids...)
}

// Where appends a list predicates to the MatchUpdate builder.
func (muo *MatchUpdateOne) Where(ps ...predicate.Match) *MatchUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MatchUpdateOne) Select(field string, fields ...string) *MatchUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Match entity.
func (muo *MatchUpdateOne) Save(ctx context.Context) (*Match, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MatchUpdateOne) SaveX(ctx context.Context) *Match {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MatchUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MatchUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MatchUpdateOne) sqlSave(ctx context.Context) (_node *Match, err error) {
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Match.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, match.FieldID)
		for _, f := range fields {
			if !match.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != match.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Date(); ok {
		_spec.SetField(match.FieldDate, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Result(); ok {
		_spec.SetField(match.FieldResult, field.TypeString, value)
	}
	if muo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.EventsTable,
			Columns: []string{match.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !muo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.EventsTable,
			Columns: []string{match.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   match.EventsTable,
			Columns: []string{match.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.PlayersTable,
			Columns: match.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !muo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.PlayersTable,
			Columns: match.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   match.PlayersTable,
			Columns: match.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Match{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
