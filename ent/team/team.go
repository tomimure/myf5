// Code generated by ent, DO NOT EDIT.

package team

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the team type in the database.
	Label = "team"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTeam holds the string denoting the team field in the database.
	FieldTeam = "team"
	// FieldMatchID holds the string denoting the match_id field in the database.
	FieldMatchID = "match_id"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"
	// EdgeMatch holds the string denoting the match edge name in mutations.
	EdgeMatch = "match"
	// Table holds the table name of the team in the database.
	Table = "teams"
	// PlayersTable is the table that holds the players relation/edge. The primary key declared below.
	PlayersTable = "team_players"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
	// MatchTable is the table that holds the match relation/edge.
	MatchTable = "teams"
	// MatchInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchInverseTable = "matches"
	// MatchColumn is the table column denoting the match relation/edge.
	MatchColumn = "match_id"
)

// Columns holds all SQL columns for team fields.
var Columns = []string{
	FieldID,
	FieldTeam,
	FieldMatchID,
}

var (
	// PlayersPrimaryKey and PlayersColumn2 are the table columns denoting the
	// primary key for the players relation (M2M).
	PlayersPrimaryKey = []string{"team_id", "player_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Team defines the type for the "team" enum field.
type Team string

// Team values.
const (
	Team1 Team = "1"
	Team2 Team = "2"
)

func (t Team) String() string {
	return string(t)
}

// TeamValidator is a validator for the "team" field enum values. It is called by the builders before save.
func TeamValidator(t Team) error {
	switch t {
	case Team1, Team2:
		return nil
	default:
		return fmt.Errorf("team: invalid enum value for team field: %q", t)
	}
}

// OrderOption defines the ordering options for the Team queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTeam orders the results by the team field.
func ByTeam(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeam, opts...).ToFunc()
}

// ByMatchID orders the results by the match_id field.
func ByMatchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMatchID, opts...).ToFunc()
}

// ByPlayersCount orders the results by players count.
func ByPlayersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayersStep(), opts...)
	}
}

// ByPlayers orders the results by players terms.
func ByPlayers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMatchField orders the results by match field.
func ByMatchField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMatchStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PlayersTable, PlayersPrimaryKey...),
	)
}
func newMatchStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MatchInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MatchTable, MatchColumn),
	)
}
